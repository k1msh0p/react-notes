
return one element with JXS - gotcha! - have a lot unnessacessry <div>, slow down react on updates
return can be array of JSX elements - get a warning - react wants a key on each element "key="test""

Better solution:
Add wrapper component, which return everything within the open and closing tag.

<Wrapper>
...
</Wrapper>

React provide a built-in Wrapper:
<React.Fragment>
</React.Fragment>
OR
<>
</>
OR 
import React, { useState, Fragment } from 'react';
<Fragment>
</Fragment>

or 
use Portal

Workign with refs:
refs is better for reading, if you just need to read the values of input and not manipulate it.
*refs are "uncontrolled Components" - not controlling the components with react when State of the components change. we don't change the input values
*useState - managed our state, we feed the input to the components - "controlled component" by react

props.children - all properties from open to closing tag of the passing component. <User onAddUser={handleThis} usersList={[1,2,3]} />

npm install
npm start

USEEFFECT Hook:

  useEffect( () => {
    console.log('EFFECT RUN');

    return () => {
      console.log("cleanup EFFECT")
    }
  }, [enteredPassword])

  useEffect( () => {
    const identifier = setTimeout(() => {
      console.log('inside effect')
      setFormIsValid(
        enteredEmail.includes('@') && enteredPassword.trim().length > 6
      );  
    }, 500);

    return () => {
      console.log('cleanup effect');
      clearTimeout(identifier)     
    }; //Cleanup function
  }, [enteredEmail, enteredPassword]);
  
  
  UseContext: 
  passing values to a lot other components.
